package com.Map.controller;



import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.bouncycastle.math.ec.rfc8032.Ed25519.Algorithm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.codec.Hex;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.Map.convert.ModelConvert;
import com.Map.model.Model;
import com.Map.model.ModelDTO;
import com.Map.service.IModelService;
import com.auth0.jwt.JWT;

import io.jsonwebtoken.JwsHeader;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiParam ;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@Api(tags = "This page CRUD Model")
public class APIController {
		
	
	
		@Autowired 
		private IModelService modelService;
		  
		@Autowired 
		private ModelConvert modelConverter;
		
		@ApiResponses(value = { @ApiResponse(code = 300, message = "This is Error Page 300", response = Class.class),
				@ApiResponse(code = 500, message = "This is Error Page 500", response = Class.class),
				@ApiResponse(code = 403, message = "Sorry, you don't have permission to access this api.", response = Class.class),
				@ApiResponse(code = 401, message = "Sorry, you can authorize to access this api.", response = Class.class)})
		
		
		
		@GetMapping(value = "/api/get")
		public String getPage() {
			return modelService.findAll().toString();
		}
		
		@GetMapping(value = "/ClientSecret")
		public String gettoken() {
		

			
			return Jwts.builder().setHeaderParam(JwsHeader.KEY_ID, "XL38M52TAV")
					.setIssuer("C9QT66NNBA")
					.setAudience("https://appleid.apple.com").setSubject("Map4DAppleID")
					.setExpiration(new Date(System.currentTimeMillis() + (1000 * 60 * 5)))
					.setIssuedAt(new Date(System.currentTimeMillis()))
					.signWith(SignatureAlgorithm.HS256, "MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgw4kLIa+0nawtpfJHn6VCqGMMjq7vHFKRMHQcKi0QW6ygCgYIKoZIzj0DAQehRANCAAQKuunI15N1QKLgboF6U5xB8vLtDAEwmRp8lRxLdz6knJ598tKjvsDczIbaUJ2NXRz/OtXU/+Hte9ImUU/rDiam")
					.compact();
			

	
			 
			
		}
		
		@GetMapping(value = "/api/paging")
		public String pagingPage(@RequestParam(value = "start") int start,@RequestParam(value = "limit") int limit) {
			return modelService.findByStartAndLimit(start, limit).toString();
		}
		
		@PostMapping(value = "/api/insert", consumes = MediaType.APPLICATION_JSON_VALUE)
		public HttpStatus addPage(@ApiParam(value = "Model",required = true) @RequestBody ModelDTO model) {
			Model modelEntity = modelConverter.toEntity(model);
			modelService.Insert(modelEntity);
			return HttpStatus.OK;
		}
		
		@PutMapping(value = "/api/update", consumes = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public HttpStatus editPage(@RequestBody ModelDTO model) {
			Model modelEntity = modelConverter.toEntity(model); 
		    modelService.Update(modelEntity);
			return HttpStatus.OK;
		}
		
		@DeleteMapping(value = "/api/delete", consumes = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public HttpStatus deletePage(@RequestBody String id) {
	          modelService.Delete(id.replace("\"", ""));       
	          return HttpStatus.OK;
		}
		
	    @PostMapping(value = "/api/logout")
	    public HttpStatus logout(HttpServletRequest request,HttpSession session) throws ServletException {
			
			/*
			 * Object keycloakAttr =
			 * request.getAttribute(KeycloakSecurityContext.class.getName()); if
			 * (keycloakAttr != null && keycloakAttr instanceof
			 * RefreshableKeycloakSecurityContext) {
			 * 
			 * RefreshableKeycloakSecurityContext ksc = (RefreshableKeycloakSecurityContext)
			 * keycloakAttr; KeycloakDeployment deployment = ksc.getDeployment();
			 * ksc.logout(deployment);
			 * 
			 * request.removeAttribute(KeycloakSecurityContext.class.getName()); }
			 */
	    	
	    	request.logout();
	    	session.invalidate();
			 
			return HttpStatus.OK;
	    }
		

		
}
