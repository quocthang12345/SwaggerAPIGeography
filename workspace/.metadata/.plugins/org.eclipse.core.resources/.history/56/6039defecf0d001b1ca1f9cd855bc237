package com.Example.utils;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import org.codehaus.jackson.map.ObjectMapper;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ReadJSONFile {

    private StringBuffer stringBuffer = new StringBuffer();

public void convert_json_to_java() throws Exception {

    String url = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson";
    URL obj = new URL(url);
    HttpURLConnection con = (HttpURLConnection) obj.openConnection();
    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
    String inputLine;

        while ((inputLine = in .readLine()) != null) {
                stringBuffer.append(inputLine);
                stringBuffer.append("\n");
        } in.close();
}

@SuppressWarnings("unchecked")
public void map_to_object() throws Exception {

    ObjectMapper om = new ObjectMapper();

    //ignore fields that are not formatted properly
    om.configure(org.codehaus.jackson.map.DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    Map<Object, Object> resultMap = om.readValue(stringBuffer.toString(), Map.class);
    ArrayList<Object> featuresArrayList = (ArrayList<Object>) resultMap.get("features");

    for(Object o : featuresArrayList) {
        LinkedHashMap<Object, Object> propertiesMap = (LinkedHashMap<Object, Object>) o;
        for(Map.Entry<Object, Object> entry : propertiesMap.entrySet()) {

            //HERE IS THE PROBLEM, THE VALUES OF THIS MAP (SECOND OBJECT) IS BEING READ AS A STRING
            //WHILE SOME VALUES ARE NOT A STRING:
            //e.g. {type=Point, coordinates=[-121.2743333, 36.6375, 8.61]}
            //AND I WANT TO READ IT AS A MAP OR ANY OTHER OBJECT THAT WOULD ALLOW ME TO ACCESS THE DATA
            String propertiesMapValues = entry.getValue().toString();
            }
        }
    }
}
