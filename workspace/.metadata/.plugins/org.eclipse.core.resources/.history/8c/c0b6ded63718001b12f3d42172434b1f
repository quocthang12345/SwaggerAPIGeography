package com.Map.config;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.google.common.base.Predicates;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.AuthorizationScopeBuilder;
import springfox.documentation.builders.LoginEndpointBuilder;
import springfox.documentation.builders.ParameterBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.schema.ModelRef;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.ImplicitGrant;
import springfox.documentation.service.LoginEndpoint;
import springfox.documentation.service.OAuth;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger.web.SecurityConfiguration;
import springfox.documentation.swagger.web.SecurityConfigurationBuilder;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class Swagger2Config {
	
	@Configuration
	public class SwaggerConfigurer {

	    @Bean
	    public SecurityConfiguration securityConfiguration() {

	        Map<String, Object> additionalQueryStringParams=new HashMap<>();
	        additionalQueryStringParams.put("quocthang1100","quocthang123");

	        return SecurityConfigurationBuilder.builder()
	            .clientId("map-api").realm("Map").appName("swagger-ui")
	            .additionalQueryStringParams(additionalQueryStringParams)
	            .build();
	    }

	    @Bean
	    public Docket api(){
		 ParameterBuilder aParameterBuilder = new ParameterBuilder();
		 aParameterBuilder.name("authorization")                 // name of header
				          .modelRef(new ModelRef("string"))
				          .parameterType("header")               // type - header
				          .defaultValue("Basic em9uZTpteXBhc3N3b3Jk")        // based64 of - zone:mypassword
				          .required(false)                // for compulsory
				          .build();
		 List<springfox.documentation.service.Parameter> aParameters = new ArrayList<>();
		 aParameters.add((springfox.documentation.service.Parameter) aParameterBuilder.build()); 
	        return new Docket(DocumentationType.SWAGGER_2)
	            .select()
	            .apis(RequestHandlerSelectors.any())
	            .paths(PathSelectors.regex("/edit.*"))
	            .build()
	            .apiInfo(apiInfo())
	            .globalOperationParameters(aParameters)
	        	.securitySchemes(buildSecurityScheme())
		        .securityContexts(buildSecurityContext());
	    }
	    
	    private ApiInfo apiInfo() {
	        return new ApiInfoBuilder()
	            .title("Handling Data")
	            .description("DESCRIPTION")
	            .version("VERSION")
	            .termsOfServiceUrl("http://terms-of-services.url")
	            .license("LICENSE")
	            .licenseUrl("http://url-to-license.com")
	            .build();
	    }

	    private List<SecurityContext> buildSecurityContext() {
	        List<SecurityReference> securityReferences = new ArrayList<>();

	        securityReferences.add(SecurityReference.builder().reference("oauth2").scopes(scopes().toArray(new AuthorizationScope[]{})).build());

	        SecurityContext context = SecurityContext.builder().forPaths(Predicates.alwaysTrue()).securityReferences(securityReferences).build();

	        List<SecurityContext> ret = new ArrayList<>();
	        ret.add(context);
	        return ret;
	    }

	    private List<? extends SecurityScheme> buildSecurityScheme() {
	        List<SecurityScheme> lst = new ArrayList<>();
	        // lst.add(new ApiKey("api_key", "X-API-KEY", "header"));

	        LoginEndpoint login = new LoginEndpointBuilder().url("http://localhost:8280/auth/realms/master/protocol/openid-connect/auth").build();

	        List<GrantType> gTypes = new ArrayList<>();
	        gTypes.add(new ImplicitGrant(login, "access_token"));

	        lst.add(new OAuth("oauth2", scopes(), gTypes));
	        return lst;
	    }

	    private List<AuthorizationScope> scopes() {
	        List<AuthorizationScope> scopes = new ArrayList<>();
	        for (String scopeItem : new String[]{"openid=openid", "profile=profile"}) {
	            String scope[] = scopeItem.split("=");
	            if (scope.length == 2) {
	                scopes.add(new AuthorizationScopeBuilder().scope(scope[0]).description(scope[1]).build());
	            } else {
					/*
					 * Htt.warn("Scope '{}' is not valid (format is scope=description)", scopeItem);
					 */
	            }
	        }

	        return scopes;
	    }
	}
}
