package com.Map.config;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.bson.types.ObjectId;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.SimpleMongoDbFactory;
import org.springframework.data.mongodb.core.convert.CustomConversions;
import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;
import org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper;
import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
import org.springframework.data.mongodb.core.convert.MongoTypeMapper;
import org.springframework.data.mongodb.core.mapping.MongoMappingContext;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

import com.Map.utils.Convert;
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;

@Configuration
@EnableMongoRepositories(basePackages = "com.Map.repository")
public class MongoConfig {

	 @Bean 
	 public MongoDbFactory mongoDbFactory() throws Exception {
		 MongoCredential credential = MongoCredential.createCredential("map", "map", "quocthang123".toCharArray());
		 
		 ServerAddress serverAddress = new ServerAddress("localhost", 27017);
		 
		 MongoClient mongoClient = new MongoClient(serverAddress,Arrays.asList(credential));
		 
		 // Mongo DB Factory 
		 SimpleMongoDbFactory simpleMongoDbFactory = new SimpleMongoDbFactory( mongoClient, "map");
		 
		 return simpleMongoDbFactory; 
	 }
	 
	 @Bean 
	 public MongoTemplate mongoTemplate() throws Exception { 
		 
		 return new MongoTemplate(mongoDbFactory(),mappingMongoConverter()); 
	 }
	 
	  @Bean
	  public MappingMongoConverter mappingMongoConverter() throws Exception {
		MongoTypeMapper typeMapper = new DefaultMongoTypeMapper(null); 
	    MappingMongoConverter converter = new MappingMongoConverter(new DefaultDbRefResolver(mongoDbFactory()), new MongoMappingContext()) ;
	    converter.setTypeMapper(typeMapper);
	    converter.setCustomConversions(customConversions());
	    return converter;
	  }
	  
	  @Bean
	  public CustomConversions customConversions() {
	      List<Converter<String, ObjectId>> converters = new ArrayList<Converter<String,ObjectId>>();
	      converters.addAll((Collection<? extends Converter<String, ObjectId>>) new StringReadConverter());
	      converters.addAll((Collection<? extends Converter<String, ObjectId>>) new StringWriteConverter());
	      return new CustomConversions(converters);
	  }
	  
	  public class StringReadConverter implements Converter<String, Object> {
		    @Override
		    public Object convert(String s) {
				return s;
		    }
		}

		public class StringWriteConverter implements Converter<Object, String> {

			@Override
			public String convert(Object source) {
				return source.toString();
			}
		}
	  
	  
	  
	       
	  	 

}
