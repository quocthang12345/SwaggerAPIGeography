package com.Map.config;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.google.common.base.Predicates;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.AuthorizationCodeGrantBuilder;
import springfox.documentation.builders.AuthorizationScopeBuilder;
import springfox.documentation.builders.LoginEndpointBuilder;
import springfox.documentation.builders.OAuthBuilder;
import springfox.documentation.builders.ParameterBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.schema.ModelRef;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.ImplicitGrant;
import springfox.documentation.service.LoginEndpoint;
import springfox.documentation.service.OAuth;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.service.TokenEndpoint;
import springfox.documentation.service.TokenRequestEndpoint;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger.web.SecurityConfiguration;
import springfox.documentation.swagger.web.SecurityConfigurationBuilder;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class Swagger2Config {
	
	ResourceBundle resourceBundle = ResourceBundle.getBundle("application");
	
	 private final String AUTH_SERVER = resourceBundle.getString("keycloak.auth-server-url");

	 private final String CLIENT_SECRET = resourceBundle.getString("keycloak.credentials.secret");

	 private final String CLIENT_ID = resourceBundle.getString("keycloak.resource");

	 private final String REALM = resourceBundle.getString("keycloak.realm");
	
	 private static final String OAUTH_NAME = "spring_oauth";
	 private static final String GROUP_NAME = "map-api";
	 
	 	@Bean
	    public Docket api(){
			/*
			 * ParameterBuilder aParameterBuilder = new ParameterBuilder();
			 * aParameterBuilder.name("authorization") // name of header .modelRef(new
			 * ModelRef("string")) .parameterType("header") // type - header
			 * .defaultValue("Basic em9uZTpteXBhc3N3b3Jk") // based64 of - zone:mypassword
			 * .required(false) // for compulsory .build();
			 * List<springfox.documentation.service.Parameter> aParameters = new
			 * ArrayList<>(); aParameters.add((springfox.documentation.service.Parameter)
			 * aParameterBuilder.build());
			 */
	        return new Docket(DocumentationType.SWAGGER_2)
	            .select()
	            .apis(RequestHandlerSelectors.any())
	            .paths(PathSelectors.regex("/edit.*"))
	            .build()
	            .apiInfo(apiInfo())
					/* .globalOperationParameters(aParameters) */
	        	.securitySchemes(Arrays.asList(securityScheme()))
		        .securityContexts(Arrays.asList(securityContext()));
	    }
	 
	 

	    private ApiInfo apiInfo() {
	        return new ApiInfoBuilder()
	            .title("Handling Data")
	            .description("DESCRIPTION")
	            .version("VERSION")
	            .termsOfServiceUrl("http://terms-of-services.url")
	            .license("LICENSE")
	            .licenseUrl("http://url-to-license.com")
	            .build();
	    }
	    
	    
	    
	    @Bean
	    public SecurityConfiguration security() {
	    	
	      return SecurityConfigurationBuilder.builder()
	       .realm(REALM)
	       .clientId(CLIENT_ID)
	       .clientSecret(CLIENT_SECRET)
	       .appName(GROUP_NAME)
	       .useBasicAuthenticationWithAccessCodeGrant(true)
	       .scopeSeparator(" ")
	       .build();
	    }

	    private SecurityScheme securityScheme() {
	    	
	      GrantType grantType = new AuthorizationCodeGrantBuilder()
	    		  				.tokenEndpoint(new TokenEndpoint(AUTH_SERVER + "/realms/" + REALM + "/protocol/openid-connect/token", GROUP_NAME))
	    		  				.tokenRequestEndpoint(new TokenRequestEndpoint(AUTH_SERVER + "/realms/" + REALM + "/protocol/openid-connect/auth", CLIENT_ID, CLIENT_SECRET))
	    		  				.build();

	      SecurityScheme oauth = new OAuthBuilder()
	           						.name(OAUTH_NAME)
	           						.grantTypes(Arrays.asList(grantType))
	           						.scopes(Arrays.asList(new AuthorizationScope[]{}))
	           						.build();
	   		return oauth;
	    }
	    


	   private SecurityContext securityContext() {
		   
		   return SecurityContext.builder()
		       .securityReferences(Arrays.asList(new SecurityReference(OAUTH_NAME, new AuthorizationScope[]{})))
		       .forPaths(PathSelectors.regex("/edit.*"))
		       .build();
	    }
}
