package com.Map.config;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.bson.types.ObjectId;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.convert.ReadingConverter;
import org.springframework.data.convert.WritingConverter;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.SimpleMongoDbFactory;
import org.springframework.data.mongodb.core.convert.CustomConversions;
import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;
import org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper;
import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
import org.springframework.data.mongodb.core.convert.MongoTypeMapper;
import org.springframework.data.mongodb.core.mapping.MongoMappingContext;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.stereotype.Component;

import com.Map.model.Model;
import com.google.common.base.Converter;
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;

@Configuration
@EnableMongoRepositories(basePackages = "com.Map.repository")
public class MongoConfig {

	 @Bean 
	 public MongoDbFactory mongoDbFactory() throws Exception {
		 MongoCredential credential = MongoCredential.createCredential("map", "map", "quocthang123".toCharArray());
		 
		 ServerAddress serverAddress = new ServerAddress("localhost", 27017);
		 
		 MongoClient mongoClient = new MongoClient(serverAddress,Arrays.asList(credential));
		 
		 // Mongo DB Factory 
		 SimpleMongoDbFactory simpleMongoDbFactory = new SimpleMongoDbFactory( mongoClient, "map");
		 
		 return simpleMongoDbFactory; 
	 }
	 
	 @Bean 
	 public MongoTemplate mongoTemplate() throws Exception { 
		 
		 return new MongoTemplate(mongoDbFactory(),mappingMongoConverter()); 
	 }
	 
	  @Bean
	  public MappingMongoConverter mappingMongoConverter() throws Exception {
		MongoTypeMapper typeMapper = new DefaultMongoTypeMapper(null); 
	    MappingMongoConverter converter = new MappingMongoConverter(new DefaultDbRefResolver(mongoDbFactory()), new MongoMappingContext()) 

	    List<Converter<String, ObjectId>> convert = new ArrayList<Converter<String, ObjectId>>();
	   converter.setTypeMapper(typeMapper);
	    return converter;
	  }
	  
	  private void initializeConverters() {

			conversionService.addConverter(ObjectIdToStringConverter.INSTANCE);
			conversionService.addConverter(StringToObjectIdConverter.INSTANCE);

			if (!conversionService.canConvert(ObjectId.class, BigInteger.class)) {
				conversionService.addConverter(ObjectIdToBigIntegerConverter.INSTANCE);
			}

			if (!conversionService.canConvert(BigInteger.class, ObjectId.class)) {
				conversionService.addConverter(BigIntegerToObjectIdConverter.INSTANCE);
			}

			if (!conversionService.canConvert(Date.class, Long.class)) {
				conversionService
						.addConverter(ConverterBuilder.writing(Date.class, Long.class, Date::getTime).getWritingConverter());
			}

			if (!conversionService.canConvert(Long.class, Date.class)) {
				conversionService.addConverter(ConverterBuilder.reading(Long.class, Date.class, Date::new).getReadingConverter());
			}

			if (!conversionService.canConvert(ObjectId.class, Date.class)) {

				conversionService.addConverter(ConverterBuilder
						.reading(ObjectId.class, Date.class, objectId -> new Date(objectId.getTimestamp())).getReadingConverter());
			}

			conversionService
					.addConverter(ConverterBuilder.reading(Code.class, String.class, Code::getCode).getReadingConverter());
			conversions.registerConvertersIn(conversionService);
		}
	  
	       
	   
	 

}
