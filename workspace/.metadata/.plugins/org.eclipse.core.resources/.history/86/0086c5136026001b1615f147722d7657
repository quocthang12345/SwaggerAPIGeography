package com.Map.config;

import java.util.Arrays;
import java.util.ResourceBundle;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.AuthorizationCodeGrantBuilder;
import springfox.documentation.builders.OAuthBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.service.TokenEndpoint;
import springfox.documentation.service.TokenRequestEndpoint;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger.web.SecurityConfiguration;
import springfox.documentation.swagger.web.SecurityConfigurationBuilder;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class Swagger2Config  {

	ResourceBundle resourceBundle = ResourceBundle.getBundle("application");

	private final String AUTH_SERVER = resourceBundle.getString("keycloak.auth-server-url");

	private final String CLIENT_SECRET = resourceBundle.getString("keycloak.credentials.secret");

	private final String CLIENT_ID = resourceBundle.getString("keycloak.resource");

	private final String REALM = resourceBundle.getString("keycloak.realm");

	private static final String OAUTH_NAME = "spring_oauth";
	private static final String GROUP_NAME = "map-api";

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.any())
				.paths(PathSelectors.any()).build().apiInfo(apiInfo())
				.securitySchemes(Arrays.asList(securityScheme())).securityContexts(Arrays.asList(securityContext()));
	}

	private ApiInfo apiInfo() {
		return new ApiInfoBuilder().title("Handling Data").description("DESCRIPTION").version("VERSION")
				.termsOfServiceUrl("http://terms-of-services.url").license("LICENSE")
				.licenseUrl("http://url-to-license.com").build();
	}

	@Bean
	public SecurityConfiguration security() {
		return SecurityConfigurationBuilder.builder()
				.realm(REALM)
				.clientId(CLIENT_ID)
				.clientSecret(CLIENT_SECRET)
				.appName(GROUP_NAME)
				.useBasicAuthenticationWithAccessCodeGrant(false)				
				.scopeSeparator(" ")
				.build();
	}

	private SecurityScheme securityScheme() {
		GrantType grantType = new AuthorizationCodeGrantBuilder()
				.tokenEndpoint(new TokenEndpoint(AUTH_SERVER + "/realms/" + REALM + "/protocol/openid-connect/token",
						GROUP_NAME))
				.tokenRequestEndpoint(new TokenRequestEndpoint(
						AUTH_SERVER + "/realms/" + REALM + "/protocol/openid-connect/auth", CLIENT_ID, CLIENT_SECRET))
				.build();

		SecurityScheme oauth = new OAuthBuilder()
				.name(OAUTH_NAME)
				.grantTypes(Arrays.asList(grantType))
				.scopes(Arrays.asList(scopes()))
				.build();
		return oauth;
	}


	
	private AuthorizationScope[] scopes() {
		AuthorizationScope[] scopes = { new AuthorizationScope("view_admin", "for CRUD operations"),
				new AuthorizationScope("view_user", "for read operations") };
		return scopes;
	}
	 

	private SecurityContext securityContext() {
		return SecurityContext.builder().securityReferences(Arrays.asList(new SecurityReference(OAUTH_NAME, scopes()))).forPaths(PathSelectors.any())
				.build();
	}
}
